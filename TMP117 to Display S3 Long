/*
 * LilyGO T-Display S3 Long (AXS15231B, 180x640) + TMP117
 * - Uses LilyGO AXS15231B driver: draw to TFT_eSPI sprite, push via lcd_PushColors_rotated_90().
 * - Reads TMP117 via I2C, sets 1 s conversion + internal averaging, shows current °C (and a 1-min avg).
 *
 * Wiring (adjust SDA/SCL if your board differs):
 *   S3 Long 3V3  → TMP117 VCC
 *   S3 Long GND  → TMP117 GND
 *   S3 Long GPIO15 (SDA) → TMP117 SDA
 *   S3 Long GPIO10 (SCL) → TMP117 SCL
 *
 * Ref:
 *  - LilyGO T-Display S3 Long repo (+ AXS15231B driver & examples): https://github.com/Xinyuan-LilyGO/T-Display-S3-Long
 *  - AXS15231B example functions: axs15231_init(), lcd_PushColors_rotated_90(), lcd_fill()  (see examples/TFT/AXS15231B.cpp)
 *  - TMP117 datasheet: 16-bit 0.0078125 °C/LSB, config at 0x01, result at 0x00, device ID 0x0117 at 0x0F
 */

#include "AXS15231B.h"      // from LilyGO repo /lib      (required)
#include <Arduino.h>
#include <TFT_eSPI.h>       // sprite engine only
#include <Wire.h>           // I2C for TMP117

// ---------- Display objects ----------
TFT_eSPI tft = TFT_eSPI(180, 640);
TFT_eSprite sprite = TFT_eSprite(&tft);

// ---------- TMP117 registers ----------
#define TMP117_ADDR      0x48
#define REG_TEMP_RESULT  0x00
#define REG_CONFIG       0x01
#define REG_DEVICE_ID    0x0F

// ---------- I2C pins (adjust if needed) ----------
#ifndef I2C_SDA_PIN
#define I2C_SDA_PIN 15   // Many S3 Long configs use SDA=15 …
#endif
#ifndef I2C_SCL_PIN
#define I2C_SCL_PIN 10   // … and SCL=10. Verify on your board / pins_config.h
#endif

// ---------- Timing / averaging ----------
static const uint32_t CONV_INTERVAL_MS = 1000;     // 1 s (matches TMP117 conv time)
static const uint32_t WARMUP_MS        = 30000;    // 30 s warm-up (can set to 60000)
static const uint16_t AVG_COUNT        = 60;       // 60 samples → 1-min average

// ---------- UI colors ----------
#define COL_BG     TFT_BLACK
#define COL_TEXT   TFT_WHITE
#define COL_TEMP   TFT_CYAN
#define COL_AVG    TFT_YELLOW
#define COL_FRAME  TFT_DARKGREY

// ---------- TMP117 helpers ----------
static bool writeReg16(uint8_t reg, uint16_t value) {
  Wire.beginTransmission(TMP117_ADDR);
  Wire.write(reg);
  Wire.write(value >> 8);          // MSB
  Wire.write(value & 0xFF);        // LSB
  return (Wire.endTransmission() == 0);
}

static bool readReg16(uint8_t reg, uint16_t &value) {
  Wire.beginTransmission(TMP117_ADDR);
  Wire.write(reg);
  if (Wire.endTransmission(false) != 0) return false;  // repeated START
  if (Wire.requestFrom((int)TMP117_ADDR, 2) != 2) return false;
  uint8_t msb = Wire.read();
  uint8_t lsb = Wire.read();
  value = ((uint16_t)msb << 8) | lsb;
  return true;
}

// TMP117 CONFIG: continuous mode, 1 s conversion, 8× internal averaging
// Datasheet fields: AVG [10:9], CONV [7:5], MODE [4]
static uint16_t makeConfigCont_1s_Avg8() {
  const uint16_t AVG_8X    = (1u << 9);  // 01b at [10:9]
  const uint16_t CONV_1S   = (4u << 5);  // 100b at [7:5] = 1 s
  const uint16_t MODE_CONT = (0u << 4);  // continuous
  return (AVG_8X | CONV_1S | MODE_CONT);
}

static inline double rawToC(uint16_t raw) {
  // TMP117: 16-bit two's complement, LSB = 0.0078125 °C (1/128 °C)
  int16_t s = (int16_t)raw;
  return (double)s * 0.0078125;
}

// ---------- UI ----------
void drawFrame(const char* title, float tC, float avgC, bool warmingUp, uint16_t secondsLeft) {
  sprite.fillSprite(COL_BG);

  // Title
  sprite.setTextDatum(TC_DATUM);
  sprite.setTextColor(COL_TEXT, COL_BG);
  sprite.setTextSize(2);
  sprite.drawString(title, 320, 8);

  // Temperature (big)
  sprite.setTextDatum(MC_DATUM);
  sprite.setTextColor(COL_TEMP, COL_BG);
  sprite.setTextSize(7);
  char buf[48];
  if (!isnan(tC)) {
    snprintf(buf, sizeof(buf), "%.4f °C", tC);
  } else {
    snprintf(buf, sizeof(buf), "--.-- °C");
  }
  sprite.drawString(buf, 320, 92);

  // Average (small)
  sprite.setTextDatum(TC_DATUM);
  sprite.setTextColor(COL_AVG, COL_BG);
  sprite.setTextSize(2);
  if (!isnan(avgC)) {
    snprintf(buf, sizeof(buf), "1-min avg: %.4f °C", avgC);
  } else if (warmingUp) {
    snprintf(buf, sizeof(buf), "Warming up… %us", (unsigned)secondsLeft);
  } else {
    snprintf(buf, sizeof(buf), "Averaging…");
  }
  sprite.drawString(buf, 320, 152);

  // Push to panel (bar display is rotated 90°)
  lcd_PushColors_rotated_90(0, 0, 640, 180, (uint16_t*)sprite.getPointer());
}

void setup() {
  Serial.begin(115200);

  // Backlight off during init
  pinMode(TFT_BL, OUTPUT);     // defined by LilyGO driver
  digitalWrite(TFT_BL, LOW);

  // Initialize AXS15231B panel
  axs15231_init();             // from LilyGO driver

  // Create sprite framebuffer (16-bit RGB565)
  sprite.createSprite(640, 180);
  sprite.setSwapBytes(1);

  // Clear panel once
  lcd_fill(0, 0, 180, 640, 0x0000);

  // Backlight on
  digitalWrite(TFT_BL, HIGH);

  // I2C init on chosen pins @ 400 kHz
  Wire.begin(I2C_SDA_PIN, I2C_SCL_PIN);
  Wire.setClock(400000);

  // Check TMP117 device ID (expect 0x0117 at 0x0F)
  uint16_t id;
  if (!readReg16(REG_DEVICE_ID, id)) {
    drawFrame("TMP117 not found (ID read failed)", NAN, NAN, false, 0);
    delay(3000);
  } else {
    if (id != 0x0117) {
      Serial.printf("WARNING: Unexpected TMP117 ID 0x%04X (expected 0x0117)\n", id);
    }
  }

  // Configure TMP117: continuous, 1 s conversion, 8× averaging
  uint16_t cfg = makeConfigCont_1s_Avg8();
  if (!writeReg16(REG_CONFIG, cfg)) {
    drawFrame("TMP117 config write failed", NAN, NAN, false, 0);
    delay(3000);
  }

  // Warm-up (sensor & PCB thermal equilibrium)
  uint32_t tStart = millis();
  while (millis() - tStart < WARMUP_MS) {
    uint16_t left = (uint16_t)((WARMUP_MS - (millis() - tStart)) / 1000UL);
    drawFrame("TMP117 on T‑Display S3 Long", NAN, NAN, true, left);
    delay(250);
  }
}

void loop() {
  // Collect 60 readings (1 s apart) → show current & 1-min average
  double sum = 0.0;
  float lastT = NAN;

  for (uint16_t i = 0; i < AVG_COUNT; i++) {
    delay(CONV_INTERVAL_MS);

    uint16_t raw;
    if (!readReg16(REG_TEMP_RESULT, raw)) {
      drawFrame("I2C read error", lastT, NAN, false, 0);
      continue;
    }

    float tC = (float)rawToC(raw);
    lastT = tC;
    sum += tC;

    // Live update every second
    float avgNow = (i > 0) ? (sum / (i + 1)) : NAN;
    drawFrame("TMP117 on T‑Display S3 Long", tC, avgNow, false, 0);
  }

  float avg1m = (float)(sum / AVG_COUNT);
  // Hold the averaged frame briefly
  drawFrame("TMP117 on T‑Display S3 Long", NAN, avg1m, false, 0);
  delay(1000);
}
