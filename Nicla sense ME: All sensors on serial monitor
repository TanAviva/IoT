

/*
  Nicla Sense ME – High Precision Readout (standalone)
  - Pushes sensor ODR where API allows, then oversamples/averages in software
  - Prints high-precision, averaged values once per second

Board:   Arduino Nicla Sense ME
  Libs:    Arduino_BHY2 (install via Library Manager)
  Serial:  115200 baud
*/
#include "Arduino.h"
#include "Arduino_BHY2.h"
// ======= Precision knobs (tune as needed) =======
// Motion: going above 200 Hz may offer diminishing returns vs BLE/USB throughput.
#define ODR_IMU_HZ      200    // accel/gyro/derived vectors
#define ODR_MAG_HZ       50    // magnetometer (lower is fine)
#define ODR_ENV_HZ       25    // temp/hum/baro/gas sample rate
#define PRINT_INTERVAL_MS 1000 // average window length & print rate
// ======= Motion / Orientation (corrected streams) =======
SensorXYZ         acc(SENSOR_ID_ACC);       // m/s^2
SensorXYZ         gyro(SENSOR_ID_GYRO);     // deg/s
SensorXYZ         mag(SENSOR_ID_MAG);       // uT
SensorXYZ         lacc(SENSOR_ID_LACC);     // m/s^2
SensorXYZ         grav(SENSOR_ID_GRA);      // m/s^2
SensorOrientation ori(SENSOR_ID_ORI);       // deg
SensorQuaternion  rv(SENSOR_ID_RV);         // quaternion
// ======= Environmental =======
Sensor            temp(SENSOR_ID_TEMP);     // °C
Sensor            hum(SENSOR_ID_HUM);       // %RH
Sensor            baro(SENSOR_ID_BARO);     // hPa
Sensor            gas(SENSOR_ID_GAS);       // Ohms
// ======= Air Quality via BSEC (BME688) =======
SensorBSEC        bsec(SENSOR_ID_BSEC);     // IAQ, eCO2, bVOCeq, comp. T/H/G
// ======= Activity / Gestures / Steps (optional) =======
SensorActivity    activity(SENSOR_ID_AR);
Sensor            tilt(SENSOR_ID_TILT_DETECTOR);
Sensor            stepCounter(SENSOR_ID_STC);
Sensor            stepDetector(SENSOR_ID_STD);
// ------------ simple accumulate/average helpers ------------
struct Stats1D {
  double sum = 0.0;
  double sum2 = 0.0;
  uint32_t n = 0;
  void add(double v){ sum += v; sum2 += v*v; n++; }
  double mean() const { return (n ? sum / n : NAN); }
  double stddev() const { return (n>1 ? sqrt((sum2/n) - sq(sum/n)) : NAN); }
  void clear(){ sum = sum2 = 0.0; n = 0; }
};
struct Stats3D {
  Stats1D x,y,z;
  void add(double vx, double vy, double vz){ x.add(vx); y.add(vy); z.add(vz); }
  void clear(){ x.clear(); y.clear(); z.clear(); }
};
static Stats3D accS, gyroS, magS, laccS, gravS;
static Stats1D tempS, humS, baroS, gasS, iaqS, eco2S, bvocS;
static uint32_t lastPrint = 0;
void configureAll() {
  // Initialize BHY2 (standalone)
  BHY2.begin();
// --- Motion / Orientation ---
  acc.configure(ODR_IMU_HZ, 0);
  gyro.configure(ODR_IMU_HZ, 0);
  lacc.configure(ODR_IMU_HZ, 0);
  grav.configure(ODR_IMU_HZ, 0);
  ori.configure(ODR_IMU_HZ, 0);
  rv.configure(ODR_IMU_HZ, 0);
mag.configure(ODR_MAG_HZ, 0);
// --- Environmental ---
  temp.configure(ODR_ENV_HZ, 0);
  hum.configure(ODR_ENV_HZ, 0);
  baro.configure(ODR_ENV_HZ, 0);
  gas.configure(ODR_ENV_HZ, 0);
// --- BSEC (BME688) ---
  bsec.begin(); // profile handled internally; accuracy rises over time
// --- Activity / steps (optional) ---
  activity.configure(5, 0);
  tilt.configure(5, 0);
  stepCounter.configure(1, 0);
  stepDetector.configure(5, 0);
}
void setup() {
  Serial.begin(115200);
  while (!Serial && millis() < 3000) {}
  Serial.println(F("\nNicla Sense ME – High Precision Readout"));
  configureAll();
}

// pretty print with selectable decimals
inline void p2(const __FlashStringHelper* k, double v, uint8_t dec=6){
  Serial.print(k); Serial.println(v, dec);
}
void loop() {
  // Always service the sensor hub
  BHY2.update();
// Accumulate latest samples (oversampling)
  // Motion
  accS.add(acc.x(), acc.y(), acc.z());
  gyroS.add(gyro.x(), gyro.y(), gyro.z());
  magS.add(mag.x(), mag.y(), mag.z());
  laccS.add(lacc.x(), lacc.y(), lacc.z());
  gravS.add(grav.x(), grav.y(), grav.z());
// Environmental
  tempS.add(temp.value());
  humS.add(hum.value());
  baroS.add(baro.value());
  gasS.add(gas.value());
// BSEC (only if accuracy > 0 these evolve)
  iaqS.add(bsec.iaq());
  eco2S.add(bsec.co2_eq());
  bvocS.add(bsec.b_voc_eq());
// Once per PRINT_INTERVAL_MS: print averaged snapshot
  const uint32_t now = millis();
  if (now - lastPrint >= PRINT_INTERVAL_MS) {
    lastPrint = now;
Serial.println();
    Serial.println(F("=================================================="));
    Serial.println(F("Averaged high-precision snapshot"));
// --- Motion / Orientation ---
    Serial.println(F("[Motion - means ± stddev]"));
    Serial.print(F("  Acc (m/s^2):     "));
    Serial.print(accS.x.mean(), 6); Serial.print(F(" ± ")); Serial.print(accS.x.stddev(), 6);
    Serial.print(F(", ")); Serial.print(accS.y.mean(), 6); Serial.print(F(" ± ")); Serial.print(accS.y.stddev(), 6);
    Serial.print(F(", ")); Serial.print(accS.z.mean(), 6); Serial.print(F(" ± ")); Serial.println(accS.z.stddev(), 6);
Serial.print(F("  Gyro (deg/s):    "));
    Serial.print(gyroS.x.mean(), 6); Serial.print(F(" ± ")); Serial.print(gyroS.x.stddev(), 6);
    Serial.print(F(", ")); Serial.print(gyroS.y.mean(), 6); Serial.print(F(" ± ")); Serial.print(gyroS.y.stddev(), 6);
    Serial.print(F(", ")); Serial.print(gyroS.z.mean(), 6); Serial.print(F(" ± ")); Serial.println(gyroS.z.stddev(), 6);
Serial.print(F("  Mag (uT):        "));
    Serial.print(magS.x.mean(), 6); Serial.print(F(" ± ")); Serial.print(magS.x.stddev(), 6);
    Serial.print(F(", ")); Serial.print(magS.y.mean(), 6); Serial.print(F(" ± ")); Serial.print(magS.y.stddev(), 6);
    Serial.print(F(", ")); Serial.print(magS.z.mean(), 6); Serial.print(F(" ± ")); Serial.println(magS.z.stddev(), 6);
Serial.print(F("  LinAcc (m/s^2):  "));
    Serial.print(laccS.x.mean(), 6); Serial.print(F(" ± ")); Serial.print(laccS.x.stddev(), 6);
    Serial.print(F(", ")); Serial.print(laccS.y.mean(), 6); Serial.print(F(" ± ")); Serial.print(laccS.y.stddev(), 6);
    Serial.print(F(", ")); Serial.print(laccS.z.mean(), 6); Serial.print(F(" ± ")); Serial.println(laccS.z.stddev(), 6);
Serial.print(F("  Gravity (m/s^2): "));
    Serial.print(gravS.x.mean(), 6); Serial.print(F(" ± ")); Serial.print(gravS.x.stddev(), 6);
    Serial.print(F(", ")); Serial.print(gravS.y.mean(), 6); Serial.print(F(" ± ")); Serial.print(gravS.y.stddev(), 6);
    Serial.print(F(", ")); Serial.print(gravS.z.mean(), 6); Serial.print(F(" ± ")); Serial.println(gravS.z.stddev(), 6);
// Orientation & rotation (not averaged—quaternions would need special handling)
    Serial.println(F("  Orientation (deg):"));
    Serial.print (F("    pitch="));   Serial.print(ori.pitch(), 6);
    Serial.print (F(", roll="));       Serial.print(ori.roll(), 6);
    Serial.print (F(", heading="));    Serial.println(ori.heading(), 6);

Serial.print (F("  Rotation Vector (quat): "));
    Serial.print(F("w=")); Serial.print(rv.w(), 6);
    Serial.print(F(", x=")); Serial.print(rv.x(), 6);
    Serial.print(F(", y=")); Serial.print(rv.y(), 6);
    Serial.print(F(", z=")); Serial.println(rv.z(), 6);
// --- Environmental ---
    Serial.println(F("[Environmental - means ± stddev]"));
    Serial.print(F("  Temperature (C): ")); Serial.print(tempS.mean(), 6); Serial.print(F(" ± ")); Serial.println(tempS.stddev(), 6);
    Serial.print(F("  Humidity (%RH):  ")); Serial.print(humS.mean(), 6);  Serial.print(F(" ± ")); Serial.println(humS.stddev(), 6);
    Serial.print(F("  Pressure (hPa):  ")); Serial.print(baroS.mean(), 6); Serial.print(F(" ± ")); Serial.println(baroS.stddev(), 6);
    Serial.print(F("  Gas (Ohms):      ")); Serial.print(gasS.mean(), 2);  Serial.print(F(" ± ")); Serial.println(gasS.stddev(), 2);
// --- BSEC (IAQ etc.) ---
    Serial.println(F("[Air Quality - BSEC]"));
    Serial.print (F("  IAQ: "));         Serial.print(iaqS.mean(), 2);
    Serial.print (F(" (acc "));           Serial.print(bsec.accuracy()); Serial.println(F(" of 3)"));
    Serial.print (F("  eCO2 (ppm): "));  Serial.println(eco2S.mean(), 1);
    Serial.print (F("  bVOCeq (ppm): "));Serial.println(bvocS.mean(), 3);
    Serial.print (F("  Comp T/H/G: "));  // convenience dump
    Serial.print (bsec.comp_t(), 2); Serial.print(F(" C, "));
    Serial.print (bsec.comp_h(), 2); Serial.print(F(" %RH, "));
    Serial.print (bsec.comp_g());   Serial.println(F(" Ohms"));
// Optional status
    Serial.print(F("Samples this window ~ IMU: "));
    Serial.print(accS.x.n); Serial.print(F(", ENV: ")); Serial.println(tempS.n);
// Clear accumulators for next window
    accS.clear(); gyroS.clear(); magS.clear(); laccS.clear(); gravS.clear();
    tempS.clear(); humS.clear(); baroS.clear(); gasS.clear();
    iaqS.clear();  eco2S.clear(); bvocS.clear();
  }
}

From <https://m365.cloud.microsoft/chat/?fromcode=cmc&redirectid=34F168E70DF74F75AB99856FC952306F&auth=2> 
