/*
 * Nicla Sense Env → T‑Display S3 Long (ESP32‑S3 + AXS15231B, 180×640)
 * Adds:
 *   - VOC Alert panel (TVOC/Ethanol thresholds)
 *   - Red warning banner + LED mirroring on Nicla
 *   - On-screen threshold table (TVOC & IAQ category bands)
 * Keeps:
 *   - Indoor IAQ mode (ZMOD4410) & Outdoor AQ mode (ZMOD4510)
 *   - HS4001 Temp/RH
 *   - Mode selection via KEY, long-press Cleaning
 *   - IAQ warm-up/stabilization banner (~15 min)
 *
 * Library features used (readings, modes, LEDs): Arduino_NiclaSenseEnv [GitHub].
 * (If method names differ in your installed release, open its Examples and adjust.)
 *
 * Refs:
 *  - Library features & LED control: https://github.com/arduino-libraries/Arduino_NiclaSenseEnv
 *  - IAQ stabilization guidance (ZMOD4410): Renesas forum & docs
 *  - ZMOD4410 outputs: TVOC, IAQ (UBA-style), eCO2 (datasheet)
 */

#include "AXS15231B.h"
#include <Arduino.h>
#include <Wire.h>
#include <TFT_eSPI.h>
#include <Arduino_NiclaSenseEnv.h>

// ---------------- I2C pins ----------------
// A) Common on many S3 Long builds:
#define I2C_SDA_PIN 15
#define I2C_SCL_PIN 10
// B) If your board’s Qwiic header is wired to 43/44:
// #define I2C_SDA_PIN 43
// #define I2C_SCL_PIN 44

// --------------- Button -------------------
#define PIN_KEY  14          // change if your board differs
#define KEY_ACTIVE_LOW 1

// --------------- Objects ------------------
TFT_eSPI tft(180, 640);
TFT_eSprite sprite(&tft);
NiclaSenseEnv nicla(Wire);

// --------------- Theme --------------------
#define COL_BG     0x0000
#define COL_PANEL  0x0842
#define COL_FRAME  0x3186
#define COL_TEXT   0xFFFF
#define COL_MUTED  0xAD55
#define COL_ACCENT 0xFDA0
#define COL_CYAN   0x07FF
#define COL_WARN   0xFFE0
#define COL_GOOD   0x07E0
#define COL_BAD    0xF800
#define COL_BARBG  0x0841
#define COL_RED    0xF800

// --------------- Modes --------------------
enum UIMode : uint8_t { MODE_INDOOR = 0, MODE_OUTDOOR = 1 };
UIMode currentMode = MODE_INDOOR;

// IAQ warm-up (ZMOD4410 baseline stabilization) ~15 min
const uint32_t IAQ_STABILIZE_MS = 15UL * 60UL * 1000UL;
uint32_t modeStartMs = 0;

// --------------- VOC thresholds (CONFIG) ---------------
// NOTE: Defaults below are engineering bands inspired by public IAQ/TVOC references.
// Adjust to your environment. (ppb bands depend on VOC mix and algorithm firmware.)
static const float TVOC_GOOD_MAX_PPB     = 300.0f;   // Good    : 0–300 ppb (tunable)
static const float TVOC_MODERATE_MAX_PPB = 1000.0f;  // Moderate: 300–1000 ppb (tunable)
static const float VOC_ALERT_TVOC_PPB    = 1000.0f;  // Alert when TVOC > 1000 ppb
static const float VOC_ALERT_ETHANOL     = 0.50f;    // Alert when Ethanol index > 0.50 (tunable)

// IAQ bands (index). If your firmware outputs a different range, tune these.
static const float IAQ_GOOD_MAX   = 50.0f;           // Good:    ≤ 50
static const float IAQ_MOD_MAX    = 100.0f;          // Moderate: 51–100

// --------------- Sampling cadence ----------
const uint32_t SAMPLE_MS = 1000;

// --------------- Button state --------------
uint32_t lastKeyChangeMs = 0;
bool lastKeyLevel = true;
bool longPressArmed = false;

// --------------- UI helpers ----------------
void panel(int x,int y,int w,int h,uint16_t outline,uint16_t fill,int r=6){
  sprite.fillRoundRect(x,y,w,h,r,fill);
  sprite.drawRoundRect(x,y,w,h,r,outline);
}
void labelValTL(const char* label, const String& val, int x, int y, uint16_t col=COL_TEXT){
  sprite.setTextDatum(TL_DATUM);
  sprite.setTextSize(1);
  sprite.setTextColor(COL_MUTED, COL_BG);
  sprite.drawString(label, x, y);
  sprite.setTextSize(2);
  sprite.setTextColor(col, COL_BG);
  sprite.drawString(val, x, y+14);
}
uint16_t colorAQ(float idx){
  if (isnan(idx)) return COL_MUTED;
  if (idx <= IAQ_GOOD_MAX)     return COL_GOOD;
  if (idx <= IAQ_MOD_MAX)      return COL_WARN;
  return COL_BAD;
}

// Convert 565 → RGB888 for Nicla LED
void rgb565_to_888(uint16_t c, uint8_t& r, uint8_t& g, uint8_t& b){
  r = ((c >> 11) & 0x1F) * 255 / 31;
  g = ((c >>  5) & 0x3F) * 255 / 63;
  b = ((c >>  0) & 0x1F) * 255 / 31;
}

// ---------------- Nicla control (modes/LED/clean) ----------------
// If your library has different names, open its Examples and replace.

bool setIndoorMode(){
  // e.g., nicla.setIndoorMode(NSE_INDOOR_IAQ_2G);
  return nicla.setIndoorAirQualityMode(); // adjust if needed
}
bool setOutdoorMode(){
  // e.g., nicla.setOutdoorMode(NSE_OUTDOOR_AQ);
  return nicla.setOutdoorAirQualityMode(); // adjust if needed
}
bool startCleaningPulse(){
  // Some releases offer specific cleaning calls; adapt from examples if needed.
  return nicla.startCleaning();
}
void setNiclaLedRgb(uint8_t r, uint8_t g, uint8_t b){
  nicla.setRgbLed(r,g,b);
}
void setNiclaLed565(uint16_t c){
  uint8_t r,g,b; rgb565_to_888(c, r,g,b); setNiclaLedRgb(r,g,b);
}
void setOrangeLed(bool on){
  // If exposed by your library; if not, no-op
  nicla.setOrangeLed(on); // adjust if your API differs or comment out if not present
}

// ---------------- UI sections ----------------
void drawHeader(){
  sprite.setTextDatum(TL_DATUM);
  sprite.setTextColor(COL_TEXT, COL_BG);
  sprite.setTextSize(2);
  sprite.drawString("Nicla Sense Env — T‑Display S3 Long", 10, 6);

  // Mode badge (top-right)
  sprite.setTextDatum(TR_DATUM);
  sprite.setTextSize(1);
  sprite.setTextColor(COL_MUTED, COL_BG);
  sprite.drawString("Mode:", 630, 8);
  sprite.setTextColor(COL_ACCENT, COL_BG);
  sprite.drawString(currentMode == MODE_INDOOR ? "Indoor IAQ" : "Outdoor AQ", 630, 24);
}

void drawLeftCard(){
  panel(10, 34, 220, 140, COL_FRAME, COL_PANEL, 8);
  sprite.setTextDatum(TL_DATUM);
  sprite.setTextSize(1);
  sprite.setTextColor(COL_MUTED, COL_PANEL);
  sprite.drawString("Sensors / Links", 20, 42);
  sprite.setTextColor(COL_TEXT, COL_PANEL);
  sprite.drawString("HS4001: Temp / Humidity", 20, 58);
  sprite.drawString("ZMOD4410: TVOC, eCO2, IAQ", 20, 74);
  sprite.drawString("ZMOD4510: NO2, O3, OAQ",    20, 90);
  sprite.setTextColor(COL_MUTED, COL_PANEL);
  sprite.drawString("I2C (ESLOV) @ 3.3V", 20, 108);
  sprite.drawString("Arduino_NiclaSenseEnv", 20, 124);
}

void drawBigTRH(float tC, float rh){
  panel(240, 40, 390, 70, COL_FRAME, 0x0010, 8);
  sprite.setTextDatum(MC_DATUM);
  sprite.setTextColor(COL_CYAN, 0x0010);
  sprite.setTextSize(4);
  char buf[64];
  if (!isnan(tC) && !isnan(rh)) snprintf(buf, sizeof(buf), "%.2f °C  |  %.1f %%RH", tC, rh);
  else snprintf(buf, sizeof(buf), "--.-- °C  |  --.- %%RH");
  sprite.drawString(buf, 240+195, 40+35);
}

void drawIndoorSet(float tvoc_ppb, float eco2_ppm, float iaq, float odor, float ethanol){
  labelValTL("Indoor IAQ",  isnan(iaq)  ? "--" : String(iaq,1), 240, 118, colorAQ(iaq));
  labelValTL("TVOC (ppb)",  isnan(tvoc_ppb) ? "--" : String(tvoc_ppb,0), 240, 150);
  labelValTL("eCO2 (ppm)",  isnan(eco2_ppm) ? "--" : String(eco2_ppm,0), 420, 150);
  labelValTL("Odor idx",    isnan(odor)     ? "--" : String(odor,2),     240, 186);
  labelValTL("Ethanol idx", isnan(ethanol)  ? "--" : String(ethanol,2),  420, 186);
}

void drawOutdoorSet(float no2_ppb, float o3_ppb, float oaq){
  labelValTL("Outdoor AQ",  isnan(oaq) ? "--" : String(oaq,1),  420, 118, colorAQ(oaq));
  labelValTL("NO2 (ppb)",   isnan(no2_ppb) ? "--" : String(no2_ppb,0), 240, 222);
  labelValTL("O3  (ppb)",   isnan(o3_ppb)  ? "--" : String(o3_ppb,0),  420, 222);
}

void drawStabilizationBanner(){
  if (currentMode != MODE_INDOOR) return;
  uint32_t elapsed = millis() - modeStartMs;
  if (elapsed >= IAQ_STABILIZE_MS) return;
  uint32_t remain = (IAQ_STABILIZE_MS - elapsed + 999)/1000;
  char msg[64];
  snprintf(msg, sizeof(msg), "Stabilizing IAQ baseline… %lus", (unsigned long)remain);

  const int x=10, y=180-22, w=220, h=16;
  panel(x,y,w,h, COL_FRAME, COL_PANEL, 6);
  sprite.setTextDatum(MC_DATUM);
  sprite.setTextColor(COL_TEXT, COL_PANEL);
  sprite.setTextSize(1);
  sprite.drawString(msg, x+w/2, y+h/2);
}

// VOC threshold table (right-bottom)
void drawThresholdCard(){
  const int x=470, y=180-62, w=160, h=52;
  panel(x,y,w,h, COL_FRAME, COL_PANEL, 6);
  sprite.setTextDatum(TL_DATUM);
  sprite.setTextSize(1);
  sprite.setTextColor(COL_MUTED, COL_PANEL);
  sprite.drawString("Thresholds", x+6, y+4);
  sprite.setTextColor(COL_TEXT, COL_PANEL);
  char line[64];

  snprintf(line, sizeof(line), "TVOC: G<=%.0f M<=%.0f", TVOC_GOOD_MAX_PPB, TVOC_MODERATE_MAX_PPB);
  sprite.drawString(line, x+6, y+18);
  snprintf(line, sizeof(line), "IAQ: G<=%.0f M<=%.0f", IAQ_GOOD_MAX, IAQ_MOD_MAX);
  sprite.drawString(line, x+6, y+32);
}

// VOC alert panel (left-bottom)
void drawVocAlert(bool alert, const String& reason){
  const int x=240, y=180-62, w=220, h=52;
  uint16_t fill = alert ? COL_BAD : COL_PANEL;
  panel(x,y,w,h, COL_FRAME, fill, 6);
  sprite.setTextDatum(TL_DATUM);
  sprite.setTextSize(1);
  sprite.setTextColor(alert ? COL_TEXT : COL_MUTED, fill);
  sprite.drawString("VOC Alert", x+6, y+4);
  sprite.setTextColor(COL_TEXT, fill);
  sprite.drawString(alert ? reason : "No alerts", x+6, y+20);

  // Quick hint lines
  sprite.setTextColor(alert ? COL_TEXT : COL_MUTED, fill);
  sprite.drawString("TVOC/Ethanol crossed limit", x+6, y+34);
}

void drawFrame(
  float tC, float rh,
  float tvoc_ppb, float eco2_ppm, float iaq, float odor, float ethanol,
  float no2_ppb, float o3_ppb, float oaq,
  bool vocAlert, const String& vocReason
){
  sprite.fillSprite(COL_BG);
  drawHeader();
  drawLeftCard();
  drawBigTRH(tC, rh);

  drawIndoorSet(tvoc_ppb, eco2_ppm, iaq, odor, ethanol);
  drawOutdoorSet(no2_ppb, o3_ppb, oaq);

  drawVocAlert(vocAlert, vocReason);
  drawThresholdCard();
  drawStabilizationBanner();

  lcd_PushColors_rotated_90(0, 0, 640, 180, (uint16_t*)sprite.getPointer());
}

// --------------- Mode & LED logic ---------------
void applyMode(UIMode m){
  currentMode = m;
  modeStartMs = millis();

  bool ok = (currentMode == MODE_INDOOR) ? setIndoorMode() : setOutdoorMode();
  if (!ok) Serial.println("WARN: set mode failed (adjust API names per your library).");
}

void applyLedForState(bool vocAlert, float indoorIAQ, float outdoorAQ){
  if (vocAlert){
    setNiclaLed565(COL_BAD);     // Red for alert
    setOrangeLed(true);          // Turn orange status LED on as extra alert (if supported)
    return;
  }
  setOrangeLed(false);

  // If Indoor mode still stabilizing → cyan
  if (currentMode == MODE_INDOOR){
    if (millis() - modeStartMs < IAQ_STABILIZE_MS){
      setNiclaLed565(COL_CYAN);
      return;
    }
    setNiclaLed565(colorAQ(indoorIAQ));
  } else {
    setNiclaLed565(colorAQ(outdoorAQ));
  }
}

// --------------- KEY handling ---------------
bool keyRead(){
  bool level = digitalRead(PIN_KEY);
  return KEY_ACTIVE_LOW ? !level : level;
}
void handleKey(){
  bool k = keyRead();
  uint32_t now = millis();

  if (k != lastKeyLevel && (now - lastKeyChangeMs) > 30){
    lastKeyChangeMs = now;
    lastKeyLevel = k;

    if (k){ longPressArmed = true; }
    else{
      if (longPressArmed && (now - lastKeyChangeMs) < 1500){
        applyMode(currentMode == MODE_INDOOR ? MODE_OUTDOOR : MODE_INDOOR);
      }
      longPressArmed = false;
    }
  }

  if (longPressArmed && (now - lastKeyChangeMs) >= 1500){
    longPressArmed = false;
    bool ok = startCleaningPulse();
    if (!ok) Serial.println("WARN: cleaning pulse failed (adjust per lib examples).");
  }
}

// --------------- Setup -----------------------
void setup() {
  Serial.begin(115200);

  // Display init
  pinMode(TFT_BL, OUTPUT);
  digitalWrite(TFT_BL, LOW);
  axs15231_init();
  sprite.createSprite(640, 180);
  sprite.setSwapBytes(1);
  lcd_fill(0, 0, 180, 640, 0x0000);
  digitalWrite(TFT_BL, HIGH);

  // I2C
  Wire.begin(I2C_SDA_PIN, I2C_SCL_PIN);
  Wire.setClock(400000);

  // KEY
  pinMode(PIN_KEY, KEY_ACTIVE_LOW ? INPUT_PULLUP : INPUT);

  // Nicla
  if (!nicla.begin()){
    sprite.fillSprite(COL_BG);
    sprite.setTextDatum(MC_DATUM);
    sprite.setTextColor(COL_BAD, COL_BG);
    sprite.setTextSize(2);
    sprite.drawString("Nicla Sense Env not found (I2C)", 320, 90);
    lcd_PushColors_rotated_90(0, 0, 640, 180, (uint16_t*)sprite.getPointer());
    delay(3000);
  }

  applyMode(MODE_INDOOR); // start in Indoor mode (IAQ focus)
  setNiclaLed565(COL_CYAN); // show active / stabilizing initially
}

// --------------- Loop ------------------------
void loop() {
  handleKey();

  // Read metrics (adjust names if your library differs)
  float tC      = nicla.readTemperature();
  float rh      = nicla.readHumidity();

  float tvoc    = nicla.readTVOC();
  float eco2    = nicla.readECO2();
  float iaq     = nicla.readIndoorAirQuality();
  float odor    = nicla.readOdorIndex();
  float ethanol = nicla.readEthanolIndex();

  float no2     = nicla.readNO2();
  float o3      = nicla.readO3();
  float oaq     = nicla.readOutdoorAirQuality();

  // --- VOC Alert logic ---
  bool vocAlert = false;
  String reason;
  if (!isnan(tvoc) && tvoc > VOC_ALERT_TVOC_PPB){ vocAlert = true; reason = "TVOC " + String(tvoc,0) + " ppb"; }
  if (!vocAlert && !isnan(ethanol) && ethanol > VOC_ALERT_ETHANOL){ vocAlert = true; reason = "Ethanol idx " + String(ethanol,2); }

  applyLedForState(vocAlert, iaq, oaq);

  drawFrame(tC, rh, tvoc, eco2, iaq, odor, ethanol, no2, o3, oaq, vocAlert, reason);

  delay(SAMPLE_MS);
}
