/**
 * lvgl_nicla_dashboard_gpio38_39.ino
 * T-Display-S3-Long (ESP32-S3) + Nicla Sense ME via I2C on GPIO38/39
 * - No ESLOV connector: wire SDA/SCL/VCC/GND directly
 * - No touch: removed entirely
 * - LVGL screen shows Temp / Humidity / Pressure / Altitude (updates ~2 s)
 *
 * Requirements:
 *  - Clone LilyGO repo and keep its /lib folder (AXS15231B + LVGL) intact:
 *    https://github.com/Xinyuan-LilyGO/T-Display-S3-Long
 *  - Nicla must run Examples > Arduino_BHY2 > App so it serves sensors over I2C.
 */

#include <Arduino.h>
#include <Wire.h>
#include "AXS15231B.h"        // LilyGO display driver glue (from repo)
#include "lvgl.h"             // LVGL bundled with the repo (do not upgrade here)
#include <Arduino_BHY2Host.h> // Host API to read Nicla sensors over I2C (ESLOV protocol over I2C)

// ------------------------ I2C pins for Nicla ------------------------
#ifndef NICLA_SDA
#define NICLA_SDA 38   // requested by user
#endif
#ifndef NICLA_SCL
#define NICLA_SCL 39   // requested by user
#endif

// ------------------------ Nicla virtual sensors ------------------------
Sensor niclaTemp (SENSOR_ID_TEMP);   // °C   (BME688 on Nicla)
Sensor niclaHum  (SENSOR_ID_HUM);    // %RH  (BME688 on Nicla)
Sensor niclaBaro (SENSOR_ID_BARO);   // hPa  (BMP390 on Nicla)

// ------------------------ UI objects ------------------------
static lv_obj_t *label_title;
static lv_obj_t *label_temp;
static lv_obj_t *label_hum;
static lv_obj_t *label_pres;
static lv_obj_t *label_alti;

static lv_style_t style_title, style_big, style_med;

// Sea-level pressure for altitude estimation
static float seaLevel_hPa = 1013.25f;

// Build the simple dashboard UI
static void build_ui()
{
    // Title style
    lv_style_init(&style_title);
    lv_style_set_text_color(&style_title, lv_color_white());
    lv_style_set_text_font(&style_title, LV_FONT_DEFAULT);
    lv_style_set_text_letter_space(&style_title, 2);

    // Big numbers
    lv_style_init(&style_big);
    lv_style_set_text_color(&style_big, lv_color_hex(0xF8F8F8));
    lv_style_set_text_font(&style_big, &lv_font_montserrat_28);

    // Medium
    lv_style_init(&style_med);
    lv_style_set_text_color(&style_med, lv_color_hex(0xD0E0FF));
    lv_style_set_text_font(&style_med, &lv_font_montserrat_20);

    // Background
    lv_obj_set_style_bg_color(lv_scr_act(), lv_color_hex(0x101820), LV_PART_MAIN);
    lv_obj_set_style_bg_opa(lv_scr_act(), LV_OPA_COVER, LV_PART_MAIN);

    label_title = lv_label_create(lv_scr_act());
    lv_obj_add_style(label_title, &style_med, LV_PART_MAIN);
    lv_label_set_text(label_title, "Nicla Sense ME • Environment");
    lv_obj_align(label_title, LV_ALIGN_TOP_LEFT, 8, 6);

    label_temp = lv_label_create(lv_scr_act());
    lv_obj_add_style(label_temp, &style_big, LV_PART_MAIN);
    lv_label_set_text(label_temp, "Temp: --.- °C");
    lv_obj_align(label_temp, LV_ALIGN_LEFT_MID, 8, -30);

    label_hum = lv_label_create(lv_scr_act());
    lv_obj_add_style(label_hum, &style_big, LV_PART_MAIN);
    lv_label_set_text(label_hum, "Humidity: --.- %");
    lv_obj_align(label_hum, LV_ALIGN_LEFT_MID, 8, 8);

    label_pres = lv_label_create(lv_scr_act());
    lv_obj_add_style(label_pres, &style_big, LV_PART_MAIN);
    lv_label_set_text(label_pres, "Pressure: ----.- hPa");
    lv_obj_align(label_pres, LV_ALIGN_LEFT_MID, 8, 46);

    label_alti = lv_label_create(lv_scr_act());
    lv_obj_add_style(label_alti, &style_med, LV_PART_MAIN);
    lv_label_set_text(label_alti, "Altitude: ---.- m");
    lv_obj_align(label_alti, LV_ALIGN_LEFT_MID, 8, 80);
}

void setup()
{
    Serial.begin(115200);
    while (!Serial) {}

    // Start the dedicated I2C bus for Nicla on GPIO38/39
    // Add 4.7k pull-ups to 3.3V on SDA/SCL if needed.
    Wire.begin(NICLA_SDA, NICLA_SCL);

    // Initialize LCD pipeline (LilyGO glue) and LVGL
    axs15231_init();   // sets up the AXS15231B panel + flush for LVGL
    lv_init();
    build_ui();

    // ---- Nicla host init on (Wire) ----
    // Nicla must be running Arduino_BHY2 "App" firmware
    if (!BHY2Host.begin()) {           // I²C host by default
        lv_label_set_text(label_title, "Nicla connect FAIL (I2C)");
    } else {
        niclaTemp.begin();
        niclaHum.begin();
        niclaBaro.begin();
    }
}

void loop()
{
    // Fetch/parse new sensor frames from Nicla
    BHY2Host.update();

    // Update UI every ~2 seconds
    static uint32_t nextUiMs = 0;
    const uint32_t now = millis();
    if (now >= nextUiMs) {
        nextUiMs = now + 2000;

        const float tC  = niclaTemp.value();
        const float rh  = niclaHum.value();
        const float hPa = niclaBaro.value();

        char buf[64];
        snprintf(buf, sizeof(buf), "Temp: %.1f °C", tC);
        lv_label_set_text(label_temp, buf);

        snprintf(buf, sizeof(buf), "Humidity: %.1f %%", rh);
        lv_label_set_text(label_hum, buf);

        snprintf(buf, sizeof(buf), "Pressure: %.1f hPa", hPa);
        lv_label_set_text(label_pres, buf);

        float altitude_m = NAN;
        if (hPa > 0.0f) {
            altitude_m = 44330.0f * (1.0f - powf(hPa / seaLevel_hPa, 0.1903f));
        }
        if (isnan(altitude_m)) snprintf(buf, sizeof(buf), "Altitude: n/a");
        else snprintf(buf, sizeof(buf), "Altitude: %.1f m", altitude_m);
        lv_label_set_text(label_alti, buf);
    }

    // LVGL housekeeping
    lv_timer_handler();
    delay(8);
}
