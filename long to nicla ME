/**
 * T-Display-S3-Long + LVGL + Nicla Sense ME (no ESLOV connector, no touch)
 * - Display: AXS15231B panel via LilyGO glue (QSPI), LVGL flush callback
 * - Host I2C for Nicla on GPIO38/39 (SDA/SCL). Power Nicla with 3V3/GND.
 * - Nicla must run Examples -> Arduino_BHY2 -> App (I2C host mode).
 *
 * Notes:
 *  - Keep LVGL version bundled with LilyGO repo; rotation is done in software.
 *  - LVGL driver: sw_rotate = 1 and full_refresh = 1 (per demo).
 *  - This file replaces examples/lvgl_demo/lvgl_demo.ino in the repo.

NICLA_SDA → GPIO38 (host)
NICLA_SCL → GPIO39 (host)
3V3 → 3V3, GND → GND


 */

#include "lvgl.h"             /* https://github.com/lvgl/lvgl.git */
#include "AXS15231B.h"        /* LilyGO panel glue (pins_config + push colors) */
#include <Arduino.h>
#include <Wire.h>
#include <Arduino_BHY2Host.h> /* Host API for Nicla over I2C */

// ---------- Display constants ----------
static constexpr uint16_t SCR_W = 640;   // panel width in landscape
static constexpr uint16_t SCR_H = 180;   // panel height
// ---------- LVGL draw buffers ----------
static lv_disp_draw_buf_t draw_buf;
static lv_color_t *buf0 = nullptr;
static lv_color_t *buf1 = nullptr;

// ---------- LVGL flush callback (mirrors LilyGO demo) ----------
void my_disp_flush(lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p)
{
  uint32_t w = (area->x2 - area->x1 + 1);
  uint32_t h = (area->y2 - area->y1 + 1);

#ifdef LCD_SPI_DMA
  char i = 0;
  while (get_lcd_spi_dma_write()) {
    i = i >> 1;
    // Kick DMA engine (as in LilyGO example)
    lcd_PushColors(0, 0, 0, 0, NULL);
  }
#endif

  lcd_PushColors(area->x1, area->y1, w, h, (uint16_t *)&color_p->full);

#ifndef LCD_SPI_DMA
  lv_disp_flush_ready(disp);
#endif
}

// ---------- Nicla (host) over I2C on GPIO38/39 ----------
#define NICLA_SDA 38
#define NICLA_SCL 39

Sensor niclaTemp(SENSOR_ID_TEMP);  // °C (BME688)
Sensor niclaHum (SENSOR_ID_HUM);   // %RH (BME688)
Sensor niclaBaro(SENSOR_ID_BARO);  // hPa (BMP390)

// ---------- UI elements ----------
static lv_obj_t *label_title;
static lv_obj_t *label_temp;
static lv_obj_t *label_hum;
static lv_obj_t *label_pres;
static lv_obj_t *label_alti;

static lv_style_t st_title, st_big, st_med;
static float seaLevel_hPa = 1013.25f;

// Build a simple full-width dashboard
static void ui_build()
{
  lv_style_init(&st_title);
  lv_style_set_text_color(&st_title, lv_color_white());
  lv_style_set_text_font(&st_title, LV_FONT_DEFAULT);
  lv_style_set_text_letter_space(&st_title, 2);

  lv_style_init(&st_big);
  lv_style_set_text_color(&st_big, lv_color_hex(0xF8F8F8));
  lv_style_set_text_font(&st_big, &lv_font_montserrat_28);

  lv_style_init(&st_med);
  lv_style_set_text_color(&st_med, lv_color_hex(0xD0E0FF));
  lv_style_set_text_font(&st_med, &lv_font_montserrat_20);

  lv_obj_set_style_bg_color(lv_scr_act(), lv_color_hex(0x101820), LV_PART_MAIN);
  lv_obj_set_style_bg_opa(lv_scr_act(), LV_OPA_COVER, LV_PART_MAIN);

  label_title = lv_label_create(lv_scr_act());
  lv_obj_add_style(label_title, &st_med, LV_PART_MAIN);
  lv_label_set_text(label_title, "Nicla Sense ME • Environment");
  lv_obj_align(label_title, LV_ALIGN_TOP_LEFT, 8, 6);

  label_temp = lv_label_create(lv_scr_act());
  lv_obj_add_style(label_temp, &st_big, LV_PART_MAIN);
  lv_label_set_text(label_temp, "Temp: --.- °C");
  lv_obj_align(label_temp, LV_ALIGN_LEFT_MID, 8, -30);

  label_hum = lv_label_create(lv_scr_act());
  lv_obj_add_style(label_hum, &st_big, LV_PART_MAIN);
  lv_label_set_text(label_hum, "Humidity: --.- %");
  lv_obj_align(label_hum, LV_ALIGN_LEFT_MID, 8, 8);

  label_pres = lv_label_create(lv_scr_act());
  lv_obj_add_style(label_pres, &st_big, LV_PART_MAIN);
  lv_label_set_text(label_pres, "Pressure: ----.- hPa");
  lv_obj_align(label_pres, LV_ALIGN_LEFT_MID, 8, 46);

  label_alti = lv_label_create(lv_scr_act());
  lv_obj_add_style(label_alti, &st_med, LV_PART_MAIN);
  lv_label_set_text(label_alti, "Altitude: ---.- m");
  lv_obj_align(label_alti, LV_ALIGN_LEFT_MID, 8, 80);
}

// ---------- Setup ----------
void setup()
{
  Serial.begin(115200);
  while (!Serial) {}

  // 1) LVGL core first (as in repo pattern)
  lv_init();                               // LVGL engine up  [1](https://www.manualslib.com/manual/3539042/Arduino-Nicla-Sense-Me.html)

  // 2) Initialize panel pipeline (AXS15231B glue from LilyGO)
  axs15231_init();                          // low-level panel init + SPI/QSPI setup  

  // 3) Allocate LVGL draw buffers (small stripe buffers are fine with full_refresh)
  //    Use two small line buffers (e.g., 20 rows) to reduce RAM pressure.
  const uint32_t BUF_LINES = 20;
  size_t buf_pixels = SCR_W * BUF_LINES;
  buf0 = (lv_color_t *)malloc(buf_pixels * sizeof(lv_color_t));
  buf1 = (lv_color_t *)malloc(buf_pixels * sizeof(lv_color_t));  // may be nullptr => single buffer
  if (!buf0) {
    Serial.println("[ERR] LVGL buffer alloc failed");
    for (;;)
      delay(1000);
  }
  lv_disp_draw_buf_init(&draw_buf, buf0, buf1, buf_pixels);

  // 4) Register LVGL display driver (respect demo constraints: sw_rotate + full_refresh)
  lv_disp_drv_t disp_drv;
  lv_disp_drv_init(&disp_drv);
  disp_drv.hor_res     = SCR_W;
  disp_drv.ver_res     = SCR_H;
  disp_drv.flush_cb    = my_disp_flush;
  disp_drv.draw_buf    = &draw_buf;
  disp_drv.sw_rotate   = 1;   // software rotation enabled
  disp_drv.full_refresh= 1;   // must be 1 with sw_rotate per LilyGO note  [1](https://www.manualslib.com/manual/3539042/Arduino-Nicla-Sense-Me.html)
  (void)lv_disp_drv_register(&disp_drv);

  // 5) Build UI
  ui_build();

  // 6) Bring up Nicla on dedicated I2C (GPIO38/39). Add 4.7k pull-ups if needed.
  Wire.begin(NICLA_SDA, NICLA_SCL);

  // Nicla must run Arduino_BHY2 "App" sketch to act as a client over I2C.
  if (!BHY2Host.begin()) {   // default is I2C host mode
    lv_label_set_text(label_title, "Nicla connect FAIL (I2C)");
  } else {
    niclaTemp.begin();
    niclaHum.begin();
    niclaBaro.begin();
  }
}

// ---------- Loop ----------
void loop()
{
  // Pull and parse Nicla sensor frames
  BHY2Host.update();   // required by Arduino_BHY2Host     [2](https://github.com/boschsensortec/BHI2xy_SensorAPI)

  // Update UI every ~2 s
  static uint32_t nextMs = 0;
  const uint32_t now = millis();
  if (now >= nextMs) {
    nextMs = now + 2000;

    const float tC  = niclaTemp.value();
    const float rh  = niclaHum.value();
    const float hPa = niclaBaro.value();

    char buf[64];
    snprintf(buf, sizeof(buf), "Temp: %.1f °C", tC);
    lv_label_set_text(label_temp, buf);

    snprintf(buf, sizeof(buf), "Humidity: %.1f %%", rh);
    lv_label_set_text(label_hum, buf);

    snprintf(buf, sizeof(buf), "Pressure: %.1f hPa", hPa);
    lv_label_set_text(label_pres, buf);

    float altitude_m = NAN;
    if (hPa > 0.0f) {
      altitude_m = 44330.0f * (1.0f - powf(hPa / seaLevel_hPa, 0.1903f));
    }
    if (isnan(altitude_m)) snprintf(buf, sizeof(buf), "Altitude: n/a");
    else snprintf(buf, sizeof(buf), "Altitude: %.1f m", altitude_m);
    lv_label_set_text(label_alti, buf);
  }

  // Let LVGL run timers/animations and trigger flushes
  lv_timer_handler();
  delay(8);
}
